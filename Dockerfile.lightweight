# ü™∂ MyCoder Ultra-Lightweight Dockerfile
# Minim√°ln√≠ spot≈ôeba zdroj≈Ø pro slab≈°√≠ hardware
FROM python:3.11-slim

# Install jen nejnutnƒõj≈°√≠ system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install Ollama (lightweight)
RUN curl -fsSL https://ollama.ai/install.sh | sh

# Create app directory
WORKDIR /app

# Install jen z√°kladn√≠ Python packages (≈æ√°dn√© dev tools)
RUN pip install --no-cache-dir \
    aiohttp \
    asyncio

# Copy jen nutn√© soubory
COPY src/ ./src/
COPY docker-entrypoint.lightweight.sh ./
RUN chmod +x docker-entrypoint.lightweight.sh

# Lightweight user setup
RUN useradd -m -u 1000 mycoder && \
    chown -R mycoder:mycoder /app && \
    mkdir -p /app/workspace /app/logs && \
    chown -R mycoder:mycoder /app/workspace /app/logs

# Expose ports
EXPOSE 8000 11434

# Lightweight health check
HEALTHCHECK --interval=60s --timeout=10s --start-period=90s --retries=2 \
    CMD curl -f http://localhost:11434/api/tags || exit 1

USER mycoder

# Environment pro √∫sporu zdroj≈Ø
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV OLLAMA_MAX_LOADED_MODELS=1
ENV OLLAMA_NUM_PARALLEL=1
ENV OLLAMA_MAX_VRAM=0

CMD ["./docker-entrypoint.lightweight.sh"]

# üìä OPTIMALIZACE PRO SLAB≈†√ç HW:
#
# ‚úÖ Velikost image: ~2GB (m√≠sto 5GB+)
# ‚úÖ RAM footprint: ~1.5GB (m√≠sto 4GB+)
# ‚úÖ CPU usage: Minimal (single-threaded)
# ‚úÖ No build tools: Rychlej≈°√≠ build
# ‚úÖ No dev dependencies: M√©nƒõ overhead
# ‚úÖ TinyLlama only: Nejmen≈°√≠ AI model
# ‚úÖ CPU-only inference: ≈Ω√°dn√° GPU pot≈ôeba
# ‚úÖ Single model loading: √öspora pamƒõti
#
# ‚ö†Ô∏è  Trade-offs:
# - Jednodu≈°≈°√≠ AI responses
# - Pomalej≈°√≠ generov√°n√≠
# - Z√°kladn√≠ funkcionalita jen
# 
# üéØ Ide√°ln√≠ pro:
# - Hardware s 4-8GB RAM
# - 2-4 CPU cores
# - Testov√°n√≠ a uƒçen√≠
# - Lehk√Ω development