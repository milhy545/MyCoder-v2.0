# ðŸš€ MyCoder Development Dockerfile
# OptimalizovanÃ½ pro rychlÃ½ vÃ½voj s live reload
FROM python:3.11-slim

# Install system dependencies + development tools
RUN apt-get update && apt-get install -y \
    git \
    curl \
    build-essential \
    inotify-tools \
    vim \
    less \
    htop \
    procps \
    && rm -rf /var/lib/apt/lists/*

# Install Ollama
RUN curl -fsSL https://ollama.ai/install.sh | sh

# Create app directory
WORKDIR /app

# Install Poetry
RUN pip install poetry

# Install development Python packages first (for better caching)
RUN pip install \
    debugpy \
    watchdog \
    ipdb \
    pytest-watch \
    black \
    flake8 \
    mypy

# Copy dependency files
COPY pyproject.toml poetry.lock* ./
COPY README.md ./

# Configure Poetry for development
RUN poetry config virtualenvs.create false

# Install all dependencies INCLUDING dev dependencies  
RUN poetry lock
RUN poetry install --with dev --no-root

# Other static files already copied above

# Create mycoder user (same as production)
RUN useradd -m -u 1000 mycoder && chown -R mycoder:mycoder /app

# Create directories for development
RUN mkdir -p /app/src /app/tests /app/workspace /app/logs /app/examples /app/docs
RUN mkdir -p /home/mycoder/.ollama && chown -R mycoder:mycoder /home/mycoder/.ollama
RUN chown -R mycoder:mycoder /app

# Expose ports (including debugger)
EXPOSE 8000 11434 5678

# Health check (faster for development)
HEALTHCHECK --interval=10s --timeout=5s --start-period=30s --retries=2 \
    CMD curl -f http://localhost:11434/api/tags || exit 1

# Copy development entrypoint
COPY docker-entrypoint.dev.sh /app/
RUN chmod +x /app/docker-entrypoint.dev.sh

# Switch to mycoder user
USER mycoder
ENV PATH="/home/mycoder/.local/bin:$PATH"

# Set Python path for live reload
ENV PYTHONPATH=/app/src:/app
ENV PYTHONUNBUFFERED=1

# Development command
CMD ["/app/docker-entrypoint.dev.sh"]

# ðŸ“‹ DEVELOPMENT FEATURES:
# 
# âœ… Live reload - source code mounted as volume
# âœ… Debugger support - debugpy pre-installed  
# âœ… Hot restart - watchdog for automatic restarts
# âœ… Development tools - vim, htop, debugging tools
# âœ… Faster health checks - 10s intervals  
# âœ… All dependencies - including dev packages
# âœ… File watching - inotify-tools for file changes
# âœ… Python optimizations - PYTHONUNBUFFERED for immediate output
#
# ðŸ”§ DEBUGGING:
# 
# Remote debugging:
#   debugpy --listen 0.0.0.0:5678 --wait-for-client src/mycoder.py
#   â†’ Connect from VS Code/PyCharm to localhost:5678
#
# Interactive debugging:
#   import ipdb; ipdb.set_trace()
#   â†’ Breakpoint in terminal
#
# ðŸš€ PERFORMANCE:
# 
# Image layers optimized for development:
# 1. Base system + tools (rarely changes)
# 2. Python packages (changes when deps change) 
# 3. Source code (mounted as volume - no rebuild!)
#
# Result: Code changes = 0 seconds rebuild time! âš¡