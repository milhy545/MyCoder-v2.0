[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "mycoder-v2"
version = "2.0.0"
description = "Advanced AI-powered development assistant with adaptive modes and MCP integration"
authors = ["David Strejc <strejc.david@gmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/milhy545/MyCoder-v2.0"
repository = "https://github.com/milhy545/MyCoder-v2.0"
documentation = "https://github.com/milhy545/MyCoder-v2.0/blob/main/docs"
keywords = ["ai", "development", "assistant", "claude", "adaptive", "mcp", "orchestration", "coding"]
packages = [{include = "mycoder", from = "src"}]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

[tool.poetry.dependencies]
python = "^3.8.1"
claude-cli-auth = { git = "https://github.com/milhy545/claude-cli-authentication.git" }
pydantic = "^2.0.0"
structlog = "^23.0.0"
aiofiles = "^23.0.0"
tenacity = "^8.0.0"
aiohttp = "^3.8.0"
psutil = "^5.9.0"

# Optional dependencies for enhanced features
httpx = { version = "^0.25.0", optional = true }
click = "^8.0.0"

[tool.poetry.extras]
http = ["httpx"]

[tool.poetry.group.dev.dependencies]
pytest = "^7.0.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.0.0"
pytest-mock = "^3.10.0"
black = "^23.0.0"
isort = "^5.12.0"
flake8 = "^6.0.0"
mypy = "^1.0.0"
pre-commit = "^3.0.0"
sphinx = "^6.0.0"
sphinx-rtd-theme = "^1.2.0"

[tool.poetry.scripts]
mycoder = "mycoder.cli:main"
mycoder-demo = "demo_mycoder:main"

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["mycoder"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=mycoder",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "slow: Slow running tests",
    "network: Tests requiring network access",
    "auth: Tests requiring Claude CLI authentication",
]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "examples/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]